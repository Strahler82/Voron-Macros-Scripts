[gcode_macro RESET_SKIPS]
description: set all SKIP values to false
gcode:

  SKIP_MESH SKIP=False

  SKIP_CHAMBER_WAIT SKIP=False

  SKIP_FILAMENT_SENSOR SKIP=False

  SKIP_EXHAUST_FAN SKIP=False

  SKIP_AUTO_Z_SANITY_CHECK SKIP=False

  SKIP_AUTO_CALIBRATE_Z SKIP=False

  SKIP_QGL SKIP=False

  SKIP_PURGE_LINE SKIP=False

  SKIP_EXTRUDER_COOLDOWN_ON_PAUSE SKIP=False


[gcode_macro NOTE_PRESSURE_ADVANCE]
description: stash away pressure advance
gcode:

  {% set advance = printer['extruder'].pressure_advance | default(0.041) | float %}
  {% set smooth = printer['extruder'].smooth_time | default(0.041) | float %}

  M118 storing pressure advance {advance}, smooth time {smooth}

  SET_GCODE_VARIABLE MACRO=RESTORE_PRESSURE_ADVANCE VARIABLE=advance VALUE={advance}
  SET_GCODE_VARIABLE MACRO=RESTORE_PRESSURE_ADVANCE VARIABLE=smooth VALUE={smooth}

[gcode_macro RESTORE_PRESSURE_ADVANCE]
description: restore pressure advance to saved values
variable_advance: 0.041
variable_smooth: 0.021
gcode:
  M118 restoring pressure advance {advance}, smooth time {smooth}
  SET_PRESSURE_ADVANCE ADVANCE={advance} SMOOTH_TIME={smooth}


[delayed_gcode CLEAR_LCD]
initial_duration: 0
gcode:
  M117


[gcode_macro DISPLAY_POSITION]
description: show current toolhead position
gcode:
  {% set clear = params.CLEAR | default(1,0) %}
  {% set pos = printer.toolhead.position %}
  {% set msg = "X:%0.1f Y:%0.1f Z:%0.1f" % (pos.x, pos.y, pos.z) %}
  M117 { msg }
  GET_POSITION
  {% if clear  %}
    UPDATE_DELAYED_GCODE ID=CLEAR_LCD DURATION=10
  {% endif %}


[gcode_macro DISPLAY_PROBE_STATE]
description: show probe state on display
gcode:
  # handy for debugging attach/detach issues at the printer
  # needs to directly follow QUERY_PROBE in order to be accurate

  {% set msg = params.MSG | default("open") %}

  {% set triggered = printer.probe.last_query %}

  {% if triggered  %}
    M117 triggered
  {% else %}
    M117 {msg}
  {% endif %}


[gcode_macro RAISE_ERROR]
description: raise error as macro
gcode:
  {% set msg = params.MSG |default("ENOMSG") | string %}
  {% set notify = params.NOTIFY | default(False, True) | int %}

  {% if notify %}
    NOTIFY MSG="{msg}"
  {% endif %}

  _RAISE_ERROR MSG="{msg}"

[gcode_macro _RAISE_ERROR]
gcode:
  {% set msg = params.MSG |default("ENOMSG") | string %}
  { action_raise_error(msg) }


[gcode_macro MOVE_AROUND]
description: do one iteration of the speed test
gcode:

  CHECK_QGL

  {% set speed = 300 %}
  {% set bound = 20 %}

  {% set x_min = printer.toolhead.axis_minimum.x + bound %}
  {% set x_max = printer.toolhead.axis_maximum.x - bound %}
  {% set y_min = printer.toolhead.axis_minimum.y + bound %}
  {% set y_max = printer.toolhead.axis_maximum.y - bound %}

  G0 X{x_min} Y{y_min} F{speed * 60}

  G0 X{x_min} Y{y_max} F{speed * 60}
  G0 X{x_max} Y{y_max} F{speed * 60}
  G0 X{x_max} Y{y_min} F{speed * 60}
  G0 X{x_min} Y{y_min} F{speed * 60}

  G0 X{x_max} Y{y_max} F{speed * 60}
  G0 X{x_min} Y{y_min} F{speed * 60}

  G0 X{x_max} Y{y_min} F{speed * 60}
  G0 X{x_max} Y{y_max} F{speed * 60}
  G0 X{x_min} Y{y_max} F{speed * 60}

  G0 X{x_max} Y{y_min} F{speed * 60}
  G0 X{x_min} Y{y_max} F{speed * 60}

  G0 X{x_min} Y{y_min} F{speed * 60}


# cura search and replace regex:
# ;LAYER_COUNT:(\d+) -> ;LAYER_COUNT:\1\nSET_MAX_LAYERS VALUE=\1
# ;LAYER:(\d+)       -> ;LAYER:\1\nSET_LAYER VALUE=\1 

[gcode_macro SET_MAX_LAYERS]
description: store total number of layers, making it available to other macros
variable_max: 0
gcode:
  SET_GCODE_VARIABLE MACRO=SET_MAX_LAYERS VARIABLE=max VALUE={params.VALUE}
  M118 { "max layers set to %d" % (params.VALUE|int) }

[gcode_macro SET_LAYER]
description: set current layer number, making it available to other macros
gcode:
  {% set msg = "layer %d of %d" % ((params.VALUE|int), (printer["gcode_macro SET_MAX_LAYERS"].max|int)) %}
  M117 { msg }
